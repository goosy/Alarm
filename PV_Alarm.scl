FUNCTION_BLOCK "PV_Alarm"
TITLE='模拟量进行限值报警'
VERSION:'0.01'
KNOW_HOW_PROTECT
AUTHOR:Goosy
NAME:PV_Alarm
FAMILY:GooLib

VAR_INPUT 
    PV {S7_m_c := 'true'} : REAL ;   // 被监测量
    zero {S7_m_c := 'true'} : REAL ;   // 零点值
    span {S7_m_c := 'true'} : REAL ;   // 量程值
    AH {S7_m_c := 'true'} : REAL ;   // 高高报设定值
    WH {S7_m_c := 'true'} : REAL ;   // 高报设定值
    WL {S7_m_c := 'true'} : REAL ;   // 低报设定值
    AL {S7_m_c := 'true'} : REAL ;   // 低低报设定值
    dead_zone {S7_m_c := 'true'} : REAL := 0.5;   // 死区 （赋值0.0时无死区）
    FT_time {S7_m_c := 'true'} : TIME := T#0MS;   // 容错时间 (单位毫秒 赋值T#0MS时无容错时间)
    invalid {S7_m_c := 'true'} : BOOL; // 数据无效，置位时不进行报警
END_VAR

VAR_OUTPUT 
    AH_flag {S7_m_c := 'true'} : BOOL;   // 高高报标志
    WH_flag {S7_m_c := 'true'} : BOOL;   // 高报标志
    WL_flag {S7_m_c := 'true'} : BOOL;   // 低报标志
    AL_flag {S7_m_c := 'true'} : BOOL;   // 低低报标志
    SP_error {S7_m_c := 'true'} : BOOL;   // 设置错误
END_VAR

VAR 
    trigger_alarm_high : BOOL;   // 触发高高报
    trigger_warn_high : BOOL;   // 触发高报
    trigger_warn_low : BOOL;   // 触发低报
    trigger_alarm_low : BOOL;   // 触发低低报
    alarm_high_set : TON;
    alarm_high_reset : TOF;
    warn_high_set : TON;
    warn_high_reset : TOF;
    warn_low_set : TON;
    warn_low_reset : TOF;
    alarm_low_set : TON;
    alarm_low_reset : TOF;
END_VAR

VAR_TEMP 
    ERR : BOOL;   // 错误
END_VAR


BEGIN

//参数设置错误
ERR := (WH > AH) OR (WL > WH) OR (AL > WL);
SP_error := ERR;
ERR := invalid OR ERR;

//报警触发
IF ERR THEN
    AH_flag := FALSE;
    WH_flag := FALSE;
    WL_flag := FALSE;
    AL_flag := FALSE;
    trigger_alarm_high := FALSE;
    trigger_warn_high := FALSE;
    trigger_warn_low := FALSE;
    trigger_alarm_low := FALSE;
ELSE
    //上上限报警
    IF PV > AH THEN
        trigger_alarm_high := TRUE;
        trigger_warn_high := FALSE;
        trigger_alarm_low := FALSE;
        trigger_warn_low := FALSE;
    END_IF;
    //上上限报警恢复
    IF PV < (AH - dead_zone) THEN
        trigger_alarm_high := FALSE;
    END_IF;
    
    //上限报警
    IF NOT trigger_alarm_high AND (PV > WH) THEN
        trigger_warn_high := TRUE;
        trigger_alarm_low := FALSE;
        trigger_warn_low := FALSE;
    END_IF;
    //上限报警恢复
    IF PV < (WH - dead_zone) THEN
        trigger_warn_high := FALSE;
    END_IF;
    
    //下下限报警
    IF (PV < AL) THEN
        trigger_alarm_low := TRUE;
        trigger_warn_low := FALSE;
        trigger_warn_high := FALSE;
        trigger_alarm_high := FALSE;
    END_IF;
    //下下限报警恢复
    IF PV > (AL + dead_zone) THEN
        trigger_alarm_low := FALSE;
    END_IF;
    
    //下限报警
    IF NOT trigger_alarm_low AND (PV < WL) THEN
        trigger_warn_low := TRUE;
        trigger_warn_high := FALSE;
        trigger_alarm_high := FALSE;
    END_IF;
    //下限报警恢复
    IF PV > (WL + dead_zone) THEN
        trigger_warn_low := FALSE;
    END_IF;
END_IF;

// 容错时限后输出报警标志
IF FT_time = T#0ms THEN
    AH_flag := trigger_alarm_high;
    WH_flag := trigger_warn_high;
    WL_flag := trigger_warn_low;
    AL_flag := trigger_alarm_low;
ELSE
    // 延时置位高高报
    alarm_high_set(
        IN := trigger_alarm_high,
        PT := FT_time);
    IF alarm_high_set.Q THEN
        AH_flag := TRUE;
    END_IF;

    // 延时复位高高报
    alarm_high_reset(
        IN := trigger_alarm_high,
        PT := FT_time);
    IF NOT alarm_high_reset.Q THEN
        AH_flag := FALSE;
    END_IF;
    
    // 延时置位高报
    warn_high_set(
        IN := trigger_warn_high,
        PT := FT_time);
    IF warn_high_set.Q THEN
        WH_flag := TRUE;
    END_IF;

    // 延时复位高报
    warn_high_reset(
        IN := trigger_warn_high,
        PT := FT_time);
    IF NOT warn_high_reset.Q THEN
        WH_flag := FALSE;
    END_IF;
    
    // 延时置位低报
    warn_low_set(
        IN := trigger_warn_low,
        PT := FT_time);
    IF warn_low_set.Q THEN
        WL_flag := TRUE;
    END_IF;

    // 延时复位低报
    warn_low_reset(
        IN := trigger_warn_low,
        PT := FT_time);
    IF NOT warn_low_reset.Q THEN
        WL_flag := FALSE;
    END_IF;

    // 延时置位低低报
    alarm_low_set(
        IN := trigger_alarm_low,
        PT := FT_time);
    IF alarm_low_set.Q THEN
        AL_flag := TRUE;
    END_IF;
    
    // 延时复位低低报
    alarm_low_reset(
        IN := trigger_alarm_low,
        PT := FT_time);
    IF NOT alarm_low_reset.Q THEN
        AL_flag := FALSE;
    END_IF;
    
END_IF;

END_FUNCTION_BLOCK
